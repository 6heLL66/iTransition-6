[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\6\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\6\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\6\\client\\src\\components\\TasksList.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\6\\client\\src\\components\\Task.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\6\\client\\src\\sockets.js":"5"},{"size":220,"mtime":1607959633058,"results":"6","hashOfConfig":"7"},{"size":359,"mtime":1608046097586,"results":"8","hashOfConfig":"7"},{"size":1659,"mtime":1608140816090,"results":"9","hashOfConfig":"7"},{"size":8443,"mtime":1608140816057,"results":"10","hashOfConfig":"7"},{"size":374,"mtime":1608140869112,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"125rnez",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\6\\client\\src\\index.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\6\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\6\\client\\src\\components\\TasksList.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\6\\client\\src\\components\\Task.js",["24"],"import React from 'react'\r\nimport \"./bootstrap.min.css\"\r\nimport * as Icon from 'react-bootstrap-icons'\r\nimport { useState, useEffect } from \"react\";\r\nimport { updateTask } from \"../sockets\";\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\n\r\nfunction Task({ task, index, deleteTask, raiseTask, lowerTask }) {\r\n    const box = document.getElementById(\"box\")\r\n    const [editing, setEditing] = useState(\"\")\r\n    const [color, setColor] = useState(task.color)\r\n    const [changeSizeMode, setChangeSizeMode] = useState(false)\r\n    const [size, setSize] = useState({ w: task.size.w * box.offsetWidth,\r\n                                                h: task.size.h })\r\n    const [colorsOpacity, setColorsOpacity] = useState(0)\r\n    const [colorsAnim, setColorsAnim] = useState(0)\r\n    const [isAnimation, setIsAnimation] = useState(\"\")\r\n    const [taskValues, setTaskValues] = useState({ title: task.title, content: task.content })\r\n    const [inputsValues, setInputsValues] = useState({ title: task.title, content: task.content })\r\n\r\n    function setEditMode(e) {\r\n        let elem = e.target\r\n        let id = elem.id\r\n        while (id === undefined || id === \"\") {\r\n            elem = elem.parentNode\r\n            id = elem.id\r\n        }\r\n        setEditing(id)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTaskValues({...task})\r\n        setInputsValues({...task})\r\n        setColor(task.color)\r\n        if (task.size.w * box.clientWidth > 330) setSize({ w: task.size.w * box.clientWidth, h: task.size.h })\r\n        else setSize({ w: box.clientWidth, h: task.size.h })\r\n    }, [task, box])\r\n    useEffect(() => {\r\n        document.onmouseup = saveSize.bind(null, changeSizeMode)\r\n        document.onmousemove = e => changeSize (e, changeSizeMode)\r\n    }, [changeSizeMode, saveSize])\r\n\r\n    function unsetEditMode(e) {\r\n        if (e.target.textContent === \"Save\") {\r\n            setTaskValues({...taskValues, ...{\r\n                [editing]: inputsValues[editing]\r\n            }})\r\n            updateTask({ index, task: {...taskValues, [editing]: inputsValues[editing]} })\r\n        }\r\n        setEditing(\"\")\r\n    }\r\n\r\n    function inputsHandler(e) {\r\n        setInputsValues({...inputsValues, ...{\r\n            [e.target.name]: e.target.value\r\n        }})\r\n    }\r\n    function changeColor(e) {\r\n        const color = e.target.classList[1] !== \"col-1\"\r\n                        ? e.target.classList[1]\r\n                        : e.target.childNodes[0].classList[1]\r\n        updateTask({ index, task: {...taskValues, color } })\r\n        setColor(color)\r\n    }\r\n    function saveSize() {\r\n        if (!changeSizeMode) return\r\n        updateTask({index, task: {...taskValues, size: { w: size.w / box.clientWidth, h: size.h }}})\r\n        setChangeSizeMode(false)\r\n    }\r\n\r\n    function changeSize(e, changeSizeMode) {\r\n        if (!changeSizeMode) return\r\n        const deltaX = e.pageX - changeSizeMode.pageX\r\n        const deltaY = e.pageY - changeSizeMode.pageY\r\n        let x = false, y = false\r\n        if (size.w + deltaX < box.clientWidth\r\n            && size.w + deltaX > 0.4 * box.clientWidth\r\n            && size.w + deltaX > 330) x = true\r\n        if (size.h + deltaY >= 5) y = true\r\n        if (x && !y) setSize({ ...size, w: size.w + deltaX })\r\n        else if (!x && y) setSize({ ...size, h: size.h + deltaY })\r\n        else if (x && y) setSize({ w: size.w + deltaX, h: size.h + deltaY })\r\n        setChangeSizeMode(e)\r\n    }\r\n    function showColors() {\r\n        if (isAnimation === \"hide\") clearInterval(colorsAnim)\r\n        let opacity = colorsOpacity\r\n        setIsAnimation(\"show\")\r\n        let anim = setInterval(() => {\r\n            if (opacity >= 1) {\r\n                setIsAnimation(\"\")\r\n                clearInterval(anim)\r\n            }\r\n            setColorsOpacity(opacity + 0.03)\r\n            opacity += 0.03\r\n        }, 10)\r\n        setColorsAnim(anim)\r\n    }\r\n    function hideColors() {\r\n        if (isAnimation === \"show\") clearInterval(colorsAnim)\r\n        let opacity = colorsOpacity\r\n        setIsAnimation(\"hide\")\r\n        let anim = setInterval(() => {\r\n            if (opacity <= 0) {\r\n                setIsAnimation(\"\")\r\n                clearInterval(anim)\r\n            }\r\n            setColorsOpacity(opacity - 0.03)\r\n            opacity -= 0.03\r\n        }, 10)\r\n        setColorsAnim(anim)\r\n    }\r\n    return (\r\n        <div className={`card pt-4 mt-3 ${color}`}\r\n             style={{ width: `${String(size.w - 28)}px` }}\r\n             onMouseEnter={showColors}\r\n             onMouseLeave={hideColors}\r\n        >\r\n            <Icon.XCircle className=\"close\"\r\n                    onClick={() => deleteTask(index, editing)}\r\n                    opacity={colorsOpacity}\r\n            />\r\n            <Icon.ArrowDownCircle className=\"toBottom\"\r\n                                  onClick={() => lowerTask(index, editing)}\r\n                                  opacity={colorsOpacity}\r\n            />\r\n            <Icon.ArrowUpCircle className=\"toTop\"\r\n                                onClick={() => raiseTask(index, editing)}\r\n                                opacity={colorsOpacity}\r\n            />\r\n            <Icon.CaretDownFill className=\"resize\"\r\n                                opacity={colorsOpacity}\r\n                                onMouseDown={(e) => setChangeSizeMode({...e})}\r\n            />\r\n            <div className=\"row colors\" style={{ opacity: colorsOpacity }}>\r\n                <div className=\"color-box col-1\" onClick={changeColor}>\r\n                    <div className=\"color pink\"> </div>\r\n                </div>\r\n                <div className=\"color-box col-1\" onClick={changeColor}>\r\n                    <div className=\"color blue\"> </div>\r\n                </div>\r\n                <div className=\"color-box col-1\" onClick={changeColor}>\r\n                    <div className=\"color yellow\"> </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"row\" style={{ display: editing === \"title\" ? \"flex\" : \"none\"}}>\r\n                    <div className=\"col-4\">\r\n                        <input type=\"text\"\r\n                               className=\"form-control\"\r\n                               value={inputsValues.title}\r\n                               onInput={inputsHandler}\r\n                               name=\"title\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-8\">\r\n                        <button className=\"btn btn-outline-success\" onClick={unsetEditMode}>Save</button>\r\n                        <button className=\"btn btn-outline-danger ms-2\" onClick={unsetEditMode}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <h5 className=\"card-title\"\r\n                    style={{ display: editing !== \"title\" ? 'block' : \"none\", userSelect: 'none'}}\r\n                    id=\"title\"\r\n                    onClick={setEditMode}\r\n                >{taskValues.title}</h5>\r\n                <span className=\"card-text\"\r\n                   style={{\r\n                       display: editing !== \"content\" ? 'block' : \"none\",\r\n                       userSelect: 'none',\r\n                       /*height: `${String(size.h)}px`*/\r\n                   }}\r\n                   onClick={setEditMode}\r\n                   id=\"content\"\r\n                ><ReactMarkdown>{taskValues.content}</ReactMarkdown></span>\r\n\r\n\r\n                <div className=\"col\"\r\n                     style={{\r\n                         display: editing === \"content\" ? \"block\" : \"none\",\r\n                         /*height: `${size.h < 110 ? \"110\" : String(size.h)}px`*/\r\n                     }}\r\n                >\r\n                    <textarea className=\"form-control\"\r\n                              onInput={inputsHandler}\r\n                              style={{ outline: 'none' }}\r\n                              name=\"content\"\r\n                              value={inputsValues.content}\r\n                    />\r\n                    <div className=\"col-12 mt-2\">\r\n                        <button className=\"btn btn-outline-success\" onClick={unsetEditMode}>Save</button>\r\n                        <button className=\"btn btn-outline-danger ms-2\" onClick={unsetEditMode}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={{ width: \"100%\", height: `${String(size.h)}px` }}> </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Task",["25","26"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\6\\client\\src\\sockets.js",[],{"ruleId":"27","severity":1,"message":"28","line":42,"column":8,"nodeType":"29","endLine":42,"endColumn":34,"suggestions":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'changeSize'. Either include it or remove the dependency array.","ArrayExpression",["35"],"no-native-reassign",["36"],"no-negated-in-lhs",["37"],{"desc":"38","fix":"39"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [changeSize, changeSizeMode, saveSize]",{"range":"40","text":"41"},[1751,1777],"[changeSize, changeSizeMode, saveSize]"]